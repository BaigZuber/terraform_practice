#This is for providers

terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "5.33.0"
    }
  }
}

provider "aws" {
  # Configuration options
}


#This is for EC2 instance

resource "aws_instance" "web" {
  ami           = "ami-0a3c3a20c09d6f377"
  instance_type = "t2.micro"

  tags = {
    Name = "TerraWorld"
  }
}


#This is for SSH Key

resource "aws_iam_user" "user" {
  name = "test-user"
  path = "/"
}

resource "aws_key_pair" "user" {
  key_name   = "25jan"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCtLn5+IK0qR0yk6D2LfR5p1stfzIwsCC50Hpt3DozY5UgNN0q4UgAz+zweSvFQQ1SrP1d4PhTd99oUyJDZvEKY0Qt7EPh9XVgf5zWHbHGdm3KdKs/wnpcm06LrGn3JlHyGS3pDfVwlyMaPp56WKNMXNRE//cQI6fxlaCe30jbIYK3HfgajFch6YpPyibj0QwVjhTq6MSx70zjwx05i0tFF11JMNMvN0IYAM3dno7xc3103lzeLWKjs3lBoBmhN7X+jbVyeI/Ubw68WleU1J1elDlw5wCRkdrfqQzfFOjJnB4cO19rIhgKP7EkLrLZtOTKvVqcWrRNHA+TZADImxWjchqZdywCtEUtFp2UfQz5U/6lvhNua/eAUr8Tz+20lOfOy1jxZezJ+XOlVJCpYq/6FXgJRq8zGn2NyB4TZeRXwyM/ss5vrrsooKSPuCVe+Xt6VJuHU69UlR7RxlFQwqy25B/tatZ60N1vDix/ktGo/gHc4+F42C6nLeAa+a0BAAak= root@DESKTOP-1RT156R"
}



#This is for security group
resource "aws_security_group" "example" {
  name           = "sg1"

  ingress {
    from_port    = 80
    to_port      = 80
    protocol     = "tcp"
    cidr_blocks  = ["0.0.0.0/10"]
  }

  ingress {
    from_port    = 22
    to_port      = 22
    protocol     = "tcp"
    cidr_blocks  = ["0.0.0.0/10"]
  }
}

resource "aws_vpc_security_group_egress_rule" "example" {
  security_group_id = "sg-0fac82f50b0c4682d"

  cidr_ipv4   = "10.0.0.0/8"
  from_port   = 80
  ip_protocol = "tcp"
  to_port     = 80
}




root@DESKTOP-1RT156R:/mnt/c/Users/ADMIN/OneDrive/Desktop/CLOUDETHIX_DIR/TERRAFORM/Practice# terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_user.user will be created
  + resource "aws_iam_user" "user" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "test-user"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-0a3c3a20c09d6f377"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "TerraWorld"
        }
      + tags_all                             = {
          + "Name" = "TerraWorld"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_key_pair.user will be created
  + resource "aws_key_pair" "user" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "25jan"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCtLn5+IK0qR0yk6D2LfR5p1stfzIwsCC50Hpt3DozY5UgNN0q4UgAz+zweSvFQQ1SrP1d4PhTd99oUyJDZvEKY0Qt7EPh9XVgf5zWHbHGdm3KdKs/wnpcm06LrGn3JlHyGS3pDfVwlyMaPp56WKNMXNRE//cQI6fxlaCe30jbIYK3HfgajFch6YpPyibj0QwVjhTq6MSx70zjwx05i0tFF11JMNMvN0IYAM3dno7xc3103lzeLWKjs3lBoBmhN7X+jbVyeI/Ubw68WleU1J1elDlw5wCRkdrfqQzfFOjJnB4cO19rIhgKP7EkLrLZtOTKvVqcWrRNHA+TZADImxWjchqZdywCtEUtFp2UfQz5U/6lvhNua/eAUr8Tz+20lOfOy1jxZezJ+XOlVJCpYq/6FXgJRq8zGn2NyB4TZeRXwyM/ss5vrrsooKSPuCVe+Xt6VJuHU69UlR7RxlFQwqy25B/tatZ60N1vDix/ktGo/gHc4+F42C6nLeAa+a0BAAak= root@DESKTOP-1RT156R"
      + tags_all        = (known after apply)
    }

  # aws_security_group.example will be created
  + resource "aws_security_group" "example" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/10",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/10",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "sg1"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_vpc_security_group_egress_rule.example will be created
  + resource "aws_vpc_security_group_egress_rule" "example" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "10.0.0.0/8"
      + from_port              = 80
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = "sg-0fac82f50b0c4682d"
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 80
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_vpc_security_group_egress_rule.example: Creating...
aws_key_pair.user: Creating...
aws_iam_user.user: Creating...
aws_security_group.example: Creating...
aws_instance.web: Creating...
aws_iam_user.user: Creation complete after 1s [id=test-user]
aws_vpc_security_group_egress_rule.example: Creation complete after 1s [id=sgr-0d9b6221a49789c6c]
aws_key_pair.user: Creation complete after 2s [id=25jan]
aws_security_group.example: Creation complete after 5s [id=sg-0d0d7eb5bb88c0283]
aws_instance.web: Still creating... [10s elapsed]
aws_instance.web: Still creating... [20s elapsed]
aws_instance.web: Still creating... [30s elapsed]
aws_instance.web: Creation complete after 37s [id=i-0648f1c4806294501]

Apply complete! Resources: 5 added, 0 changed, 0 destroyed.
